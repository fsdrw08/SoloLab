global:
  imageRegistry: zot.day0.sololab
consul:
  containerPorts: []
    # - name: server
    #   containerPort: 8300
    #   hostPort: 8300
    #   protocol: TCP
    # - name: serf_lan-tcp
    #   containerPort: 8301
    #   hostPort: 8301
    #   protocol: TCP
    # - name: serf_lan-udp
    #   containerPort: 8301
    #   hostPort: 8301
    #   protocol: UDP
    # - name: http
    #   containerPort: 8500
    #   hostPort: 8500
    #   protocol: TCP
    # - name: https
    #   containerPort: 8501
    #   hostPort: 8501
    #   protocol: TCP
    # - name: grpc_tls
    #   containerPort: 8503
    #   hostPort: 8503
    #   protocol: TCP
    # - name: dns-udp
    #   containerPort: 8600
    #   hostPort: 8600
    #   protocol: UDP
    # - name: dns-tcp
    #   containerPort: 8600
    #   hostPort: 8600
    #   protocol: TCP
  ## @param consul.configFiles
  configFiles:
    main:
      acl:
        enabled: true
        default_policy: deny
        enable_token_persistence: true
        tokens:
          initial_management: e95b599e-166e-7d80-08ad-aee76e7ddf19
          agent: e95b599e-166e-7d80-08ad-aee76e7ddf19
          dns: e95b599e-166e-7d80-08ad-aee76e7ddf19
          config_file_service_registration: e95b599e-166e-7d80-08ad-aee76e7ddf19
      # auto_config:
      #   authorization:
      #     enabled: true
      #     static:
      #       oidc_discovery_url: https://vault.day1.sololab:8200/v1/identity/oidc
      #       oidc_discovery_ca_cert: ## set via helm value
      #       bound_issuer: https://vault.day1.sololab:8200/v1/identity/oidc
      #       # The value for matching the aud field of the JSON web token (JWT).
      #       # The audience aud claim in a JWT is meant to refer to the authorization servers that should accept the token.
      #       bound_audiences:
      #         - consul-cluster-dc1
      #       claim_mappings:
      #         /consul/hostname: node_name
      #       claim_assertions:
      #         - value.node_name == "${node}"
      addresses:
        dns: '{{ GetInterfaceIP "eth0" }}'
      auto_encrypt:
        allow_tls: true
      bind_addr: '{{ GetInterfaceIP "eth0" }}'
      # log_level: trace
      # https://github.com/hashicorp/learn-consul-docker/blob/110bc9484b0dcd714e64604cd011a360d03b9bc6/datacenter-deploy-auto-config/vault/consul/server2.json#L33
      client_addr: "0.0.0.0"
      # config in terraform consul provider instead
      # https://developer.hashicorp.com/consul/docs/reference/agent/configuration-file/service-mesh
      # connect:
      #   enabled: true
      #   ca_provider: vault
      #   ca_config:
      #     address: https://vault.day1.sololab:8200
      #     ca_file: /consul/config/certs/ca.crt
      #     token: # set by terraform get data from vault secret
      #     root_pki_path: pki-consul_root
      #     intermediate_pki_path: pki-consul_int
      #     leaf_cert_ttl: 72h
      #     rotation_period: 2160h
      #     intermediate_cert_ttl: 8760h
      #     private_key_type: rsa
      #     private_key_bits: 2048
      datacenter: dc1
      encrypt: # set by terraform get data from vault secret
      ports:
        dns: 53
        https: 8501
      # https://discuss.hashicorp.com/t/failed-to-receive-encryption-is-configured-but-remote-state-is-not-encrypted/41222
      # encrypt_verify_incoming: true
      # encrypt_verify_outgoing: false
      # auto_encrypt:
      #   allow_tls: true
      tls:
        defaults:
          ca_file: /consul/config/certs/ca.crt
          cert_file: /consul/config/certs/server.crt
          key_file: /consul/config/certs/server.key
          verify_incoming: false
          verify_outgoing: true
          verify_server_hostname: true
        internal_rpc:
          verify_incoming: true
          verify_server_hostname: true
      # https://developer.hashicorp.com/consul/docs/reference/agent/configuration-file/telemetry
      telemetry:
        prometheus_retention_time: 30s
        disable_hostname: true
  ## @param consul.command Override default container command (useful when using custom images)
  ## ref: https://github.com/hashicorp/consul/blob/v1.20.2/.release/docker/docker-entrypoint.sh#L75
  ## this command is used to set the advertise ip to host ip when consul start
  ## in detail, this script insert "-advertise=<host ip>" in the next line of string "$CONSUL_BIND \"
  ## update: too complicate, hard code advertise ip instead
  ## before:
  ## set -- consul agent \
  ##   -data-dir="$CONSUL_DATA_DIR" \
  ##   -config-dir="$CONSUL_CONFIG_DIR" \
  ##   $CONSUL_BIND \
  ##   $CONSUL_CLIENT \
  ##   "$@"
  ##
  ## after:
  ## set -- consul agent \
  ##   -data-dir="$CONSUL_DATA_DIR" \
  ##   -config-dir="$CONSUL_CONFIG_DIR" \
  ##   $CONSUL_BIND \
  ##   -advertise=<host ip> \
  ##   $CONSUL_CLIENT \
  ##   "$@"
  ## why not pass the advertise ip into args?
  ## args only accept plain text command, not accept variable which come with expression
  ##
  # command:
  #   - "/bin/sh"
  #   - "-c"
  #   - |
  #     sed -e '/$CONSUL_BIND \\/i\' -e '    -advertise=192.168.255.20 \\' /usr/local/bin/docker-entrypoint.sh > /tmp/docker-entrypoint.sh
  #     chmod +x /tmp/docker-entrypoint.sh
  #     exec /tmp/docker-entrypoint.sh "$0" "$@"
  ## @param consul.args Override default container args (useful when using custom images)
  ## ref: https://blog.christophersmart.com/2021/01/31/podman-volumes-and-selinux/
  ## ref: https://github.com/hashicorp/consul/blob/v1.21.4/.release/docker/docker-entrypoint.sh#L70-L85
  args:
    - agent
    - -config-dir=/consul/services
  ## @param consul.podAnnotations Annotations for consul pods
  ## to keep container user as same permission as host user, set keep-id point to the container user and group id
  ## the userns annotation only work podman v4.9+
  ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  ## ref: https://github.com/containers/podman/discussions/22378
  ## ref: https://github.com/hashicorp/consul/blob/v1.20.2/Dockerfile#L271-L273
  ## e.g.
  ## podAnnotations:
  ##   io.podman.annotations.userns: keep-id:uid=100,gid=1000
  ##
  podAnnotations:
    io.podman.annotations.userns: keep-id:uid=100,gid=1000

  podLabels:
    # traefik.enable: true
    # traefik.http.routers.consul-redirect.entrypoints: web
    # traefik.http.routers.consul-redirect.rule: Host(`consul.day1.sololab`)
    # traefik.http.routers.consul-redirect.middlewares: toHttps@file
    # traefik.http.routers.consul-redirect.service: consul

    # traefik.http.routers.consul.entrypoints: webSecure
    # traefik.http.routers.consul.rule: Host(`consul.day1.sololab`)
    # traefik.http.routers.consul.tls: true
    # traefik.http.routers.consul.service: consul

    # traefik.http.services.consul.loadBalancer.serversTransport: consul@file
    # traefik.http.services.consul.loadbalancer.server.scheme: https
    # traefik.http.services.consul.loadbalancer.server.port: 8501

    # traefik.tcp.routers.consul-web.entrypoints: webSecure
    # traefik.tcp.routers.consul-web.rule: HostSNI(`consul.day1.sololab`)
    # traefik.tcp.routers.consul-web.tls.passthrough: true
    # traefik.tcp.routers.consul-web.service: consul-web
    # traefik.tcp.services.consul-web.loadbalancer.server.port: 8501

  extraEnvVars:
    - name: CONSUL_DISABLE_PERM_MGMT
      value: "ture"
    - name: TZ
      value: Asia/Shanghai
  ## @param consul.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the consul container(s)
  ## ref: https://blog.christophersmart.com/2021/01/31/podman-volumes-and-selinux/
  ##
  extraVolumeMounts:
    - name: services
      mountPath: "/consul/services:Z"
  ## @param consul.extraVolumes Optionally specify extra list of additional volumes for the consul pod(s)
  ##
  extraVolumes:
    - name: services
      hostPath:
        path: /var/home/podmgr/consul-services
        type: Directory
